#define FOSC 800000 // Clock speed
#define BAUD 9600
#define MUBRR FOSC/16/BAUD-1

/* Some macros */

#define LED PC0

#define output_low(port,pin) port &= ~(1<<pin)
#define output_high(port,pin) port |= (1<<pin)
#define set_input(portdir,pin) portdir &= ~(1<<pin)
#define set_output(portdir,pin) portdir |= (1<<pin)

#include <string.h>
#include <avr/io.h>
#include <avr/interrupt.h>


/* Main function */
int main ();

/* USART */

/* Usart initialization */
void USART_Init ( unsigned int );
/* Usart send */
void USART_Send ( char );
/* Usart receive */
void USART_Receive ( char );

/* DEBUG */
/* Debug initialize */
void debug_init();
/* Debug ping */
void debug_ping();
/* Debug variable */
int debug_pong;

/* DELAY */
void delay_ms( uint8_t );


/* Main function */
int main() {

  char send_char = '1';

  /* Initialize the USART for communication with Bluetooth module */
  USART_Init( MUBRR );

  debug_init();

  /* Enable global interrupts */
  sei();

  /* Forever alone loop */
  while (1) {

    /* DEBUG */
    /* Constantly send single character */
    send_char = '.';
    USART_Send(send_char);

    send_char = '.';
    USART_Send(send_char);

    send_char = '.';
    USART_Send(send_char);

    debug_ping();

    delay_ms(100);
  }

  return 1;
}


/* USART initialization */
void USART_Init( unsigned int ubrr ) {
  /* Set baud rate */
  UBRR0H = (unsigned char)(ubrr>>8);
  UBRR0L = (unsigned char)ubrr;
  /* Enable received and transmitter */
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
}

/* USART send byte */ 
void USART_Send( char send_byte ) {
  /* Wait until USART is ready */
  while (( UCSR0A & (1 << UDRE0 ) ) == 0) {};

  /* Send the byte */
  UDR0 = send_byte;

}

/* What to do with the received byte */
void USART_Receive( char received_byte ) {

}

/* Events */

/* USART receive event */
ISR ( USART0_RXC_vect ) {
  char received_byte;
  // Fetch the received byte value into the variable
  received_byte = UDR0;
  USART_Receive( received_byte );
}


/* Debug init */
void debug_init() {
  /* PC0 output */
  set_output(DDRC, LED);

  debug_pong = 0;
}

/* Debug ping */
void debug_ping() {
  if ( debug_pong == 0 ) {
    output_high(PORTC, LED);
    debug_pong = 1;
  } else {
    output_low(PORTC, LED);
    debug_pong = 0;
  }
}

/* Delay */
void delay_ms( uint8_t ms ) {
  uint16_t delay_count = FOSC / 17500;

  volatile uint16_t i;

  while ( ms != 0 ) {
    for (i=0; i != delay_count; i++ );
    ms--;
  }
}
